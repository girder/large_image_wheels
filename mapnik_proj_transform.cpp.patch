diff --git a/src/mapnik_proj_transform.cpp b/src/mapnik_proj_transform.cpp
index fc753564c..188731759 100644
--- a/src/mapnik_proj_transform.cpp
+++ b/src/mapnik_proj_transform.cpp
@@ -42,16 +42,6 @@
 using mapnik::proj_transform;
 using mapnik::projection;
 
-struct proj_transform_pickle_suite : boost::python::pickle_suite
-{
-    static boost::python::tuple
-    getinitargs(const proj_transform& p)
-    {
-        using namespace boost::python;
-        return boost::python::make_tuple(p.source(),p.dest());
-    }
-};
-
 namespace  {
 
 mapnik::coord2d forward_transform_c(mapnik::proj_transform& t, mapnik::coord2d const& c)
@@ -61,8 +51,7 @@ mapnik::coord2d forward_transform_c(mapnik::proj_transform& t, mapnik::coord2d c
     double z = 0.0;
     if (!t.forward(x,y,z)) {
         std::ostringstream s;
-        s << "Failed to forward project "
-          << "from " << t.source().params() << " to: " << t.dest().params();
+        s << "Failed to forward project ";
         throw std::runtime_error(s.str());
     }
     return mapnik::coord2d(x,y);
@@ -75,8 +64,7 @@ mapnik::coord2d backward_transform_c(mapnik::proj_transform& t, mapnik::coord2d
     double z = 0.0;
     if (!t.backward(x,y,z)) {
         std::ostringstream s;
-        s << "Failed to back project "
-          << "from " <<  t.dest().params() << " to: " << t.source().params();
+        s << "Failed to back project ";
         throw std::runtime_error(s.str());
     }
     return mapnik::coord2d(x,y);
@@ -87,8 +75,7 @@ mapnik::box2d<double> forward_transform_env(mapnik::proj_transform& t, mapnik::b
     mapnik::box2d<double> new_box = box;
     if (!t.forward(new_box)) {
         std::ostringstream s;
-        s << "Failed to forward project "
-          << "from " << t.source().params() << " to: " << t.dest().params();
+        s << "Failed to forward project ";
         throw std::runtime_error(s.str());
     }
     return new_box;
@@ -99,8 +86,7 @@ mapnik::box2d<double> backward_transform_env(mapnik::proj_transform& t, mapnik::
     mapnik::box2d<double> new_box = box;
     if (!t.backward(new_box)){
         std::ostringstream s;
-        s << "Failed to back project "
-          << "from " <<  t.dest().params() << " to: " << t.source().params();
+        s << "Failed to back project ";
         throw std::runtime_error(s.str());
     }
     return new_box;
@@ -111,8 +97,7 @@ mapnik::box2d<double> forward_transform_env_p(mapnik::proj_transform& t, mapnik:
     mapnik::box2d<double> new_box = box;
     if (!t.forward(new_box,points)) {
         std::ostringstream s;
-        s << "Failed to forward project "
-          << "from " << t.source().params() << " to: " << t.dest().params();
+        s << "Failed to forward project ";
         throw std::runtime_error(s.str());
     }
     return new_box;
@@ -123,8 +108,7 @@ mapnik::box2d<double> backward_transform_env_p(mapnik::proj_transform& t, mapnik
     mapnik::box2d<double> new_box = box;
     if (!t.backward(new_box,points)){
         std::ostringstream s;
-        s << "Failed to back project "
-          << "from " <<  t.dest().params() << " to: " << t.source().params();
+        s << "Failed to back project ";
         throw std::runtime_error(s.str());
     }
     return new_box;
@@ -137,7 +121,6 @@ void export_proj_transform ()
     using namespace boost::python;
 
     class_<proj_transform, boost::noncopyable>("ProjTransform", init< projection const&, projection const& >())
-        .def_pickle(proj_transform_pickle_suite())
         .def("forward", forward_transform_c)
         .def("backward",backward_transform_c)
         .def("forward", forward_transform_env)
