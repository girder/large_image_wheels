diff --git a/setup.py b/setup.py
index 24ca0ec5e..4fc5223fc 100755
--- a/setup.py
+++ b/setup.py
@@ -13,15 +13,8 @@ def check_output(args):
      return output.rstrip('\n')
 
 linkflags = []
-bin_path = os.path.join(check_output([mapnik_config, '--prefix']),'bin')
-lib_path = os.path.join(check_output([mapnik_config, '--prefix']),'lib')
-linkflags.extend(check_output([mapnik_config, '--libs']).split(' '))
-linkflags.extend(check_output([mapnik_config, '--ldflags']).split(' '))
-linkflags.extend(check_output([mapnik_config, '--dep-libs']).split(' '))
-linkflags.extend([
-    '-lmapnik-wkt',
-    '-lmapnik-json',
-])
+lib_path = check_output(['pkg-config', 'libmapnik', '--variable', 'libdir'])
+linkflags.extend(check_output(['pkg-config', 'libmapnik', '--libs']).split(' '))
 
 # Remove symlinks
 if os.path.islink('packaging/mapnik/bin') :
@@ -33,24 +26,28 @@ f_paths = open('packaging/mapnik/paths.py', 'w')
 f_paths.write('import os\n')
 f_paths.write('\n')
 
-if os.environ.get('SYSTEM_MAPNIK'):
-     input_plugin_path = check_output([mapnik_config, '--input-plugins'])
-     font_path = check_output([mapnik_config, '--fonts'])
-     f_paths.write("mapniklibpath = '{path}'\n".format(path=lib_path))
-     f_paths.write("inputpluginspath = '{path}'\n".format(path=input_plugin_path))
-     f_paths.write("fontscollectionpath = '{path}'\n".format(path=font_path))
-else:
-     os.symlink(bin_path, 'packaging/mapnik/bin')
-     os.symlink(lib_path, 'packaging/mapnik/lib')
-     f_paths.write("mapniklibpath = os.path.join(os.path.dirname(__file__), 'lib')\n")
-     f_paths.write("inputpluginspath = os.path.join(os.path.dirname(__file__), 'lib/mapnik/input')\n")
-     f_paths.write("fontscollectionpath = os.path.join(os.path.dirname(__file__), 'lib/mapnik/fonts')\n")
+input_plugin_path = os.path.join(lib_path, 'mapnik', 'input')
+font_path = os.path.join(lib_path, 'mapnik', 'fonts')
 
-f_paths.write("__all__ = [mapniklibpath,inputpluginspath,fontscollectionpath]\n")
-f_paths.close()
+if os.environ.get('LIB_DIR_NAME'):
+    mapnik_lib_path = lib_path + os.environ.get('LIB_DIR_NAME')
+else:
+    mapnik_lib_path = lib_path + "/mapnik"
+    f_paths.write("mapniklibpath = '{path}'\n".format(path=mapnik_lib_path))
+    f_paths.write(
+        "inputpluginspath = '{path}'\n".format(path=input_plugin_path))
+    f_paths.write(
+        "fontscollectionpath = '{path}'\n".format(path=font_path))
+    f_paths.write("localpath = os.path.dirname(os.path.abspath( __file__ ))\n")
+    f_paths.write("mapniklibpath = os.path.join(localpath, 'mapnik.libs')\n")
+    f_paths.write("mapniklibpath = os.path.normpath(mapniklibpath)\n")
+    f_paths.write("inputpluginspath = os.path.join(localpath, 'input')\n")
+    f_paths.write("fontscollectionpath = os.path.join(localpath, 'fonts')\n")
+    f_paths.write(
+        "__all__ = [mapniklibpath,inputpluginspath,fontscollectionpath]\n")
+    f_paths.close()
 
-extra_comp_args = check_output([mapnik_config, '--cflags']).split(' ')
-extra_comp_args = list(filter(lambda arg: arg != "-fvisibility=hidden", extra_comp_args))
+extra_comp_args = check_output(['pkg-config', 'libmapnik', '--cflags']).split(' ')
 
 if sys.platform == 'darwin':
      pass
@@ -118,21 +115,19 @@ ext_modules = [
 ]
 
 if os.environ.get("CC", False) == False:
-    os.environ["CC"] = check_output([mapnik_config, '--cxx'])
+    os.environ["CC"] = 'c++'
 if os.environ.get("CXX", False) == False:
-    os.environ["CXX"] = check_output([mapnik_config, '--cxx'])
+    os.environ["CXX"] = 'c++'
 
 setup(
      name="mapnik",
      package_dir={"": "packaging"},
-     packages=["mapnik",
-               "mapnik/printing",
-               "mapnik/bin",
-               "mapnik/lib",
-               "mapnik/lib.mapnik.fonts",
-               "mapnik/lib.mapnik.input"],
+     package_data={
+	  'mapnik': ['lib/*.*', 'lib/*/*/*', 'share/*/*', 'input/*', 'fonts/*', 'proj/*', 'gdal/*', 'bin/*'],
+     },
      include_package_data=True,
      ext_modules=ext_modules,
+     entry_points={'console_scripts': ['%s=mapnik.bin:program' % name for name in os.listdir('packaging/mapnik/bin') if not name.endswith('.py')]},
      cmdclass={"build_ext": build_ext},
      python_requires=">=3.9",
 )
